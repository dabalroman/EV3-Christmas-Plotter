{"version":3,"sources":["Components/GetCodeModal/GetCodeModal.module.css","Components/StartupModal/StartupModal.module.css","Components/LoadModal/LoadModal.module.css","Components/UI/Modal/Modal.module.css","Components/UI/FileInput/FileInput.module.css","Components/Sphere/Sphere.module.css","Components/Editor/Editor.module.css","Components/UI/Button/Button.module.css","App.module.css","Components/BottomButtonBar/BottomButtonBar.module.css","Components/UI/ButtonBar/ButtonBar.module.css","Assets/CodePasteIntoEditor.mp4","Components/FileRenderer/FileRenderer.module.css","Assets/Drawing.mp4","Utils/Dimension.js","PlotterGrid/CodeGenerators/CodeGenerator.js","PlotterGrid/CodeGenerators/CodeGenLineByLineHoriz.js","PlotterGrid/CodeGenerators/CodeGenHorizVertPoint.js","PlotterGrid/CodeGenerators/CodeGenLineByLineVert.js","Utils/Utils.js","PlotterGrid/PlotterGrid.js","GridEditor/SphereRenderer.p5.js","Components/Sphere/Sphere.js","GridEditor/PlotterGridInteractiveRenderer.js","PlotterGrid/CodeDecoder/VisualCodeDecoder.js","GridEditor/GridEditor.p5.js","Components/Editor/Editor.js","Components/UI/Button/Button.js","Components/UI/ButtonBar/ButtonBar.js","Components/BottomButtonBar/BottomButtonBar.js","Components/UI/Modal/Modal.js","Components/GetCodeModal/GetCodeModal.js","Components/UI/FileInput/FileInput.js","Components/LoadModal/LoadModal.js","GridEditor/FileRenderer.p5.js","Components/FileRenderer/FileRenderer.js","Components/StartupModal/StartupModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dimension","width","height","this","CodeGenerator","code","Error","plotterGrid","replace","reduce","p","n","INS_START","INS_DONE","INS_PEN_DOWN","INS_PEN_UP","INS_MOV_RIGHT","INS_MOV_LEFT","INS_MOV_UP","INS_MOV_DOWN","INS_RST_VERTICAL","INS_RST_HORIZONTAL","CodeGenLineByLineHoriz","push","horizontalLines","findHorizontalLinesAndDots","generateCodeForHorizontalLinesAndDots","pos","x","y","forEach","horizontalLine","y1","PlotterGrid","EDITOR_TO_PLOTTER_RATIO","x1","x2","lineLength","length","y2","CodeGenHorizVertPoint","findHorizontalLines","verticalLines","findVerticalLines","points","findPoints","generateCodeForHorizontalLines","generateCodeForVerticalLines","generateCodeForPoints","i","verticalLine","lineAlreadyDrawn","pixelFound","j","point","CodeGenLineByLineVert","findVerticalLinesAndDots","generateCodeForVerticalLinesAndDots","start","end","Math","abs","Utils","q","p1","p2","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","stepTracker","setSize","load","setInterval","save","output","size","grid","step","random","registerStep","createDataStructure","Array","w","fill","type","plotterCodeGenerator","GEN_HLBL","GEN_VLBL","GEN_HVP","plotterCode","generateCode","plotterCodeBlock","createLegoMindstormsDataBlock","copyToClipboard","state","s","temp","ENCODER_CHAR_OFFSET","String","fromCharCode","localStorage","setItem","encoded","getItem","charCodeAt","substr","SphereRendererP5","canvas","renderedPlotterGrid","texture","lastTextureUpdateFrame","enableRotation","currentRotation","mouseRotationActive","mouseRotationOffset","mouseRotationBase","startMousePos","setup","setAttributes","createCanvas","WEBGL","mousePressed","mouseReleased","mouseOut","frameRate","noStroke","smooth","createGraphics","draw","frameCount","background","image","graphics","getMousePosX","rotateY","sphere","mouseX","myCustomRedrawAccordingToNewPropsHandler","props","Sphere","id","className","Styles","touchy","sketch","rotation","PlotterGridInteractiveRenderer","cellSize","lastRenderedCanvasStep","canvasUpdateRequired","plotterGridSize","getSize","gridCanvas","isUpToDate","renderGrid","pmouseX","mouseY","pmouseY","renderCanvas","mouse","createVector","floor","rect","h","getCellState","getCurrentStep","isInside","setCellState","renderCell","VisualCodeDecoder","gridSize","strokeWeight","clear","lIns","px","py","penDown","ppenDown","instruction","console","error","stroke","line","ellipse","text","countPathLength","pathLength","GridEditorP5","lastClickVector","plotterGridInteractiveRenderer","ignoreInput","isVisualCodeDecoderUpdateNeeded","render","getRenderedGrid","mouseDragged","setCellAtPoint","mouseButton","LEFT","visualCodeDecoderStep","Editor","visualCodeDecoderUpdateNeeded","serializedPlotterGrid","bind","currentVCDUNState","setState","editor","container","getPlotterGrid","getRenderedPlotterGrid","modalActive","Component","button","styles","danger","join","onClick","children","buttonBar","bottomButtonBar","ButtonBar","Button","toggleSphereRotation","showLoadModal","saveCanvas","generatePlotterCode","showGetCodeModal","Modal","visible","childrenContainer","hideModal","GetCodeModal","center","textarea","rows","readOnly","video","autoPlay","loop","src","Video","fileInput","input","accept","onChange","event","loadCanvas","target","files","LoadModal","buttons","FileInput","FileRendererP5","noLoop","noFill","drawCanvas","undefined","path","reader","FileReader","onload","e","img","createImg","result","get","remove","readAsDataURL","fileRenderer","fileSaveRenderer","StartupModal","App","sphereRotation","showStartupModal","app","onContextMenu","preventDefault","BottomButtonBar","FileRenderer","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29fb7d50.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GetCodeModal_container__2607E\",\"video\":\"GetCodeModal_video__zp-gE\",\"text\":\"GetCodeModal_text__2F2Tw\",\"center\":\"GetCodeModal_center__MPMB9\",\"textarea\":\"GetCodeModal_textarea__-13wq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StartupModal_container__1lFGM\",\"video\":\"StartupModal_video__1xJEA\",\"text\":\"StartupModal_text__GRr0o\",\"center\":\"StartupModal_center__9BFjd\",\"textarea\":\"StartupModal_textarea__jO1e0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LoadModal_container__3r38c\",\"text\":\"LoadModal_text__1DuCk\",\"center\":\"LoadModal_center__2c37P\",\"buttons\":\"LoadModal_buttons__3dinG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Modal_background__2LXHl\",\"container\":\"Modal_container__d7Gxr\",\"childrenContainer\":\"Modal_childrenContainer__1ZSyE\",\"button\":\"Modal_button__LUNXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"FileInput_input__jZ58j\",\"button\":\"FileInput_button__27mfe\",\"danger\":\"FileInput_danger__2rTxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sphere\":\"Sphere_sphere__1n7P7\",\"touchy\":\"Sphere_touchy__3AJJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"Editor_editor__1om0T\",\"container\":\"Editor_container__1LKu-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__b6hbu\",\"danger\":\"Button_danger__1gw9z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3fFE0\",\"debuggerControls\":\"App_debuggerControls__2riJf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomButtonBar\":\"BottomButtonBar_bottomButtonBar__2XwBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonBar\":\"ButtonBar_buttonBar__2ChRW\"};","module.exports = __webpack_public_path__ + \"static/media/CodePasteIntoEditor.5de77feb.mp4\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileSaveRenderer\":\"FileRenderer_fileSaveRenderer__gSSCQ\"};","module.exports = __webpack_public_path__ + \"static/media/Drawing.2c1dbfd6.mp4\";","export default class Dimension{\r\n    width;\r\n    height;\r\n\r\n    /**\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(width = 0, height = 0){\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}","export default class CodeGenerator {\r\n    static INS_START = 255;\r\n    static INS_DONE = 256;\r\n    static INS_PEN_DOWN = 0;\r\n    static INS_PEN_UP = 1;\r\n    static INS_MOV_RIGHT = 2;\r\n    static INS_MOV_LEFT = 3;\r\n    static INS_MOV_UP = 4;\r\n    static INS_MOV_DOWN = 5;\r\n    // static INS_MOV_UP_RIGHT = 6;\r\n    // static INS_MOV_DOWN_LEFT = 7;\r\n    // static INS_MOV_UP_LEFT = 14;\r\n    // static INS_MOV_DOWN_RIGHT = 15;\r\n    static INS_RST_VERTICAL = 16;\r\n    static INS_RST_HORIZONTAL = 17;\r\n\r\n    // static INS_START = \"START\";\r\n    // static INS_DONE = \"DONE\";\r\n    // static INS_PEN_DOWN = \"PEN_DOWN\";\r\n    // static INS_PEN_UP = \"PEN_UP\";\r\n    // static INS_MOV_RIGHT = \"MOV_RIGHT\";\r\n    // static INS_MOV_LEFT = \"MOV_LEFT\";\r\n    // static INS_MOV_UP = \"MOV_UP\";\r\n    // static INS_MOV_DOWN = \"MOV_DOWN\";\r\n    // // static INS_MOV_UP_RIGHT = \"MOV_UP_RIGHT\";\r\n    // // static INS_MOV_DOWN_LEFT = \"MOV_DOWN_LEFT\";\r\n    // // static INS_MOV_UP_LEFT = \"MOV_UP_LEFT\";\r\n    // // static INS_MOV_DOWN_RIGHT = \"MOV_DOWN_RIGHT\";\r\n    // static INS_RST_VERTICAL = \"RST_VERTICAL\";\r\n    // static INS_RST_HORIZONTAL = \"RST_HORIZONTAL\";\r\n\r\n    /**\r\n     * Array with numeric instructions\r\n     * @type {[number]} code\r\n     */\r\n    code = [];\r\n\r\n    constructor() {\r\n        if (new.target === CodeGenerator) {\r\n            throw new Error('CodeGenerator is abstract class!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Boolean[][]} plotterGrid\r\n     */\r\n    generateCode(plotterGrid) {\r\n    };\r\n\r\n    static createLegoMindstormsDataBlock(code: number[]): string {\r\n        let blockPattern = '<MergeScript xmlns=\"http://www.ni.com/DiagramSdk.xsd\">\\n' +\r\n            '    <MergeData Key=\"SerializationReason\" Value=\"Copy\" />\\n' +\r\n            '    <MergeGroup Path=\".\">\\n' +\r\n            '        <MergeItem Path=\".\" IsPrimary=\"True\">' +\r\n            '           <ConfigurableMethodCall Id=\"n4\" Bounds=\"403 348 101 91\" Target=\"X3\\\\.Lib:GlobalSetNumericArray\" xmlns=\"http://www.ni.com/VirtualInstrument.xsd\">' +\r\n            '               <ConfigurableMethodTerminal ConfiguredValue=\"Instructions\">' +\r\n            '                   <Terminal Id=\"name\" Direction=\"Input\" DataType=\"String\" Hotspot=\"0.5 1\" Bounds=\"0 0 0 0\" />' +\r\n            '               </ConfigurableMethodTerminal>' +\r\n            '               <ConfigurableMethodTerminal ConfiguredValue=\"[$code]\">' +\r\n            '                   <Terminal Id=\"valueIn\" Direction=\"Input\" DataType=\"Single[]\" Hotspot=\"0.5 1\" Bounds=\"54 56 30 27\" />' +\r\n            '               </ConfigurableMethodTerminal>' +\r\n            '               <ConfigurableMethodTerminal ConfiguredValue=\"0\">' +\r\n            '                   <Terminal Id=\"InterruptsToListenFor_16B03592_CD76_4D58_8DC3_E3C3091E327A\" Direction=\"Input\" DataType=\"Int32\" Hotspot=\"0.5 1\" Bounds=\"0 0 0 0\" />' +\r\n            '               </ConfigurableMethodTerminal>' +\r\n            '               <Terminal Id=\"SequenceIn\" Direction=\"Input\" Wire=\"w3\" DataType=\"NationalInstruments:SourceModel:DataTypes:X3SequenceWireDataType\" Hotspot=\"0 0.5\" Bounds=\"0 33 18 18\" />' +\r\n            '               <Terminal Id=\"SequenceOut\" Direction=\"Output\" DataType=\"NationalInstruments:SourceModel:DataTypes:X3SequenceWireDataType\" Hotspot=\"1 0.5\" Bounds=\"83 33 18 18\" />' +\r\n            '           </ConfigurableMethodCall>' +\r\n            '       </MergeItem>\\n' +\r\n            '    </MergeGroup>\\n' +\r\n            '</MergeScript>';\r\n\r\n        return blockPattern.replace(\"$code\", code.reduce((p, n) => p + ', ' + n));\r\n    }\r\n}\r\n\r\n","import CodeGenerator from \"./CodeGenerator\";\r\nimport PlotterGrid from \"../PlotterGrid\";\r\n\r\nexport default class CodeGenLineByLineHoriz extends CodeGenerator {\r\n    generateCode(plotterGrid: Boolean[][]) {\r\n        this.code = [];\r\n\r\n        this.code.push(CodeGenLineByLineHoriz.INS_START);\r\n        this.code.push(CodeGenLineByLineHoriz.INS_PEN_UP);\r\n\r\n        let horizontalLines = this.findHorizontalLinesAndDots(plotterGrid);\r\n\r\n        this.generateCodeForHorizontalLinesAndDots(horizontalLines);\r\n\r\n        this.code.push(CodeGenLineByLineHoriz.INS_DONE);\r\n\r\n        return this.code;\r\n    }\r\n\r\n    generateCodeForHorizontalLinesAndDots(horizontalLines) {\r\n        let pos = {x: 0, y: 0};\r\n\r\n        this.code.push(CodeGenLineByLineHoriz.INS_RST_VERTICAL);\r\n\r\n        horizontalLines.forEach(horizontalLine => {\r\n            //Move to next row if necessary\r\n            //noinspection DuplicatedCode\r\n            if (pos.y !== horizontalLine.y1) {\r\n                if (pos.x !== 0) {\r\n                    this.code.push(CodeGenLineByLineHoriz.INS_RST_HORIZONTAL);\r\n                }\r\n                this.code.push(CodeGenLineByLineHoriz.INS_MOV_DOWN);\r\n                this.code.push((horizontalLine.y1 - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = 0;\r\n                pos.y = horizontalLine.y1;\r\n            }\r\n\r\n            //Move to start of new line\r\n            if (pos.x !== horizontalLine.x1) {\r\n                this.code.push(CodeGenLineByLineHoriz.INS_MOV_RIGHT);\r\n                this.code.push((horizontalLine.x1 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = horizontalLine.x1;\r\n            }\r\n\r\n            //Draw line\r\n            this.code.push(CodeGenLineByLineHoriz.INS_PEN_DOWN);\r\n            if (horizontalLine.x1 !== horizontalLine.x2) {\r\n                this.code.push(CodeGenLineByLineHoriz.INS_MOV_RIGHT);\r\n                this.code.push((horizontalLine.x2 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n            }\r\n            this.code.push(CodeGenLineByLineHoriz.INS_PEN_UP);\r\n            pos.x = horizontalLine.x2;\r\n        });\r\n    }\r\n\r\n    findHorizontalLinesAndDots(plotterGrid) {\r\n        let horizontalLines = [];\r\n        let lineLength = 0;\r\n\r\n        for (let y = 0; y < plotterGrid[0].length; y++) {\r\n            for (let x = 0; x <= plotterGrid.length; x++) {\r\n                if (x !== plotterGrid.length && plotterGrid[x][y]) {\r\n                    lineLength++;\r\n                } else {\r\n                    if (lineLength >= 1) {\r\n                        horizontalLines.push({\r\n                            x1: x - lineLength,\r\n                            y1: y,\r\n                            x2: x - 1,\r\n                            y2: y\r\n                        });\r\n                    }\r\n\r\n                    lineLength = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return horizontalLines;\r\n    }\r\n}","import CodeGenerator from \"./CodeGenerator\";\r\nimport PlotterGrid from \"../PlotterGrid\";\r\n\r\nexport default class CodeGenHorizVertPoint extends CodeGenerator {\r\n    generateCode(plotterGrid: Boolean[][]) {\r\n        this.code = [];\r\n\r\n        this.code.push(CodeGenHorizVertPoint.INS_START);\r\n        this.code.push(CodeGenHorizVertPoint.INS_PEN_UP);\r\n\r\n        let horizontalLines = this.findHorizontalLines(plotterGrid);\r\n        let verticalLines = this.findVerticalLines(plotterGrid);\r\n        let points = this.findPoints(plotterGrid);\r\n\r\n        this.generateCodeForHorizontalLines(horizontalLines);\r\n        this.generateCodeForVerticalLines(verticalLines, horizontalLines);\r\n        this.generateCodeForPoints(points);\r\n\r\n        this.code.push(CodeGenHorizVertPoint.INS_DONE);\r\n\r\n        return this.code;\r\n    }\r\n\r\n    generateCodeForHorizontalLines(horizontalLines) {\r\n        let pos = {x: 0, y: 0};\r\n\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_VERTICAL);\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_HORIZONTAL);\r\n\r\n        horizontalLines.forEach(horizontalLine => {\r\n            //Move to next row if necessary\r\n            //noinspection DuplicatedCode\r\n            if (pos.y !== horizontalLine.y1) {\r\n                if (pos.x !== 0) {\r\n                    this.code.push(CodeGenHorizVertPoint.INS_RST_HORIZONTAL);\r\n                }\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_DOWN);\r\n                this.code.push((horizontalLine.y1 - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = 0;\r\n                pos.y = horizontalLine.y1;\r\n            }\r\n\r\n            //Move to start of new line\r\n            if (pos.x !== horizontalLine.x1) {\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_RIGHT);\r\n                this.code.push((horizontalLine.x1 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = horizontalLine.x1;\r\n            }\r\n\r\n            //Draw line\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_DOWN);\r\n            this.code.push(CodeGenHorizVertPoint.INS_MOV_RIGHT);\r\n            this.code.push((horizontalLine.x2 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_UP);\r\n            pos.x = horizontalLine.x2;\r\n        });\r\n\r\n    }\r\n\r\n    generateCodeForVerticalLines(verticalLines, horizontalLines) {\r\n        let pos = {x: 0, y: 0};\r\n\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_VERTICAL);\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_HORIZONTAL);\r\n\r\n        for (let i = 0; i < verticalLines.length; i++) {\r\n            let verticalLine = verticalLines[i];\r\n            let lineAlreadyDrawn = true;\r\n\r\n            //Check if the lines are already drawn by searching for each pixel in horizontal lines\r\n            for (let y = verticalLine.y1; y <= verticalLine.y2; y++) {\r\n                let pixelFound = false;\r\n\r\n                //Look in every horizontal line for that pixel\r\n                for (let j = 0; j < horizontalLines.length; j++) {\r\n                    let horizontalLine = horizontalLines[j];\r\n\r\n                    if (horizontalLine.y1 === y && horizontalLine.x1 <= verticalLine.x1 && horizontalLine.x2 >= verticalLine.x1) {\r\n                        pixelFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!pixelFound) {\r\n                    lineAlreadyDrawn = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (lineAlreadyDrawn) {\r\n                continue;\r\n            }\r\n\r\n            //Move to next column if necessary\r\n            //noinspection DuplicatedCode\r\n            if (pos.x !== verticalLine.x1) {\r\n                if (pos.y !== 0) {\r\n                    this.code.push(CodeGenHorizVertPoint.INS_RST_VERTICAL);\r\n                    pos.y = 0;\r\n                }\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_RIGHT);\r\n                this.code.push((verticalLine.x1 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = verticalLine.x1;\r\n            }\r\n\r\n            //Move to start of new line\r\n            if (pos.y !== verticalLine.y1) {\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_DOWN);\r\n                this.code.push((verticalLine.y1 - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.y = verticalLine.y1;\r\n            }\r\n\r\n            //Draw line\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_DOWN);\r\n            this.code.push(CodeGenHorizVertPoint.INS_MOV_DOWN);\r\n            this.code.push((verticalLine.y2 - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_UP);\r\n            pos.y = verticalLine.y2;\r\n        }\r\n    }\r\n\r\n    generateCodeForPoints(points) {\r\n        let pos = {x: 0, y: 0};\r\n\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_VERTICAL);\r\n        this.code.push(CodeGenHorizVertPoint.INS_RST_HORIZONTAL);\r\n\r\n        points.forEach(point => {\r\n            //Move to next column if necessary\r\n            //noinspection DuplicatedCode\r\n            if (pos.x !== point.x) {\r\n                if (pos.y !== 0) {\r\n                    this.code.push(CodeGenHorizVertPoint.INS_RST_VERTICAL);\r\n                    pos.y = 0;\r\n                }\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_RIGHT);\r\n                this.code.push((point.x - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = point.x;\r\n            }\r\n\r\n            //Move to start of new line\r\n            if (pos.y !== point.y) {\r\n                this.code.push(CodeGenHorizVertPoint.INS_MOV_DOWN);\r\n                this.code.push((point.y - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.y = point.y;\r\n            }\r\n\r\n            //Draw line\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_DOWN);\r\n            this.code.push(CodeGenHorizVertPoint.INS_PEN_UP);\r\n            pos.y = point.y;\r\n        });\r\n    }\r\n\r\n    findHorizontalLines(plotterGrid) {\r\n        let verticalLines = [];\r\n        let lineLength = 0;\r\n\r\n        for (let y = 0; y < plotterGrid[0].length; y++) {\r\n            for (let x = 0; x <= plotterGrid.length; x++) {\r\n                if (x !== plotterGrid.length && plotterGrid[x][y]) {\r\n                    lineLength++;\r\n                } else {\r\n                    if (lineLength > 1) {\r\n                        verticalLines.push({\r\n                            x1: x - lineLength,\r\n                            y1: y,\r\n                            x2: x - 1,\r\n                            y2: y\r\n                        });\r\n                    }\r\n\r\n                    lineLength = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return verticalLines;\r\n    }\r\n\r\n    findVerticalLines(plotterGrid) {\r\n        let horizontalLines = [];\r\n        let lineLength = 0;\r\n\r\n        for (let x = 0; x < plotterGrid.length; x++) {\r\n            for (let y = 0; y <= plotterGrid[0].length; y++) {\r\n                if (y !== plotterGrid[0].length && plotterGrid[x][y]) {\r\n                    lineLength++;\r\n                } else {\r\n                    if (lineLength > 1) {\r\n                        horizontalLines.push({\r\n                            x1: x,\r\n                            y1: y - lineLength,\r\n                            x2: x,\r\n                            y2: y - 1\r\n                        });\r\n                    }\r\n\r\n                    lineLength = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return horizontalLines;\r\n    }\r\n\r\n    findPoints(plotterGrid) {\r\n        let points = [];\r\n\r\n        for (let x = 0; x < plotterGrid.length; x++) {\r\n            for (let y = 0; y < plotterGrid[0].length; y++) {\r\n                if (!plotterGrid[x][y]) {\r\n                    continue;\r\n                }\r\n\r\n                //Left\r\n                if (x !== 0 && plotterGrid[x - 1][y]) {\r\n                    continue;\r\n                }\r\n\r\n                //Right\r\n                if (x !== plotterGrid.length - 1 && plotterGrid[x + 1][y]) {\r\n                    continue;\r\n                }\r\n\r\n                //Top\r\n                if (y !== 0 && plotterGrid[x][y - 1]) {\r\n                    continue;\r\n                }\r\n\r\n                //Bottom\r\n                if (y !== plotterGrid[0].length - 1 && plotterGrid[x][y + 1]) {\r\n                    continue;\r\n                }\r\n\r\n                points.push({\r\n                    x: x,\r\n                    y: y\r\n                });\r\n            }\r\n        }\r\n\r\n        return points;\r\n    }\r\n}","import CodeGenerator from \"./CodeGenerator\";\r\nimport PlotterGrid from \"../PlotterGrid\";\r\n\r\nexport default class CodeGenLineByLineVert extends CodeGenerator {\r\n    generateCode(plotterGrid: Boolean[][]): number[] {\r\n        this.code = [];\r\n\r\n        this.code.push(CodeGenLineByLineVert.INS_START);\r\n        this.code.push(CodeGenLineByLineVert.INS_PEN_UP);\r\n\r\n        let verticalLines = this.findVerticalLinesAndDots(plotterGrid);\r\n\r\n        this.generateCodeForVerticalLinesAndDots(verticalLines);\r\n\r\n        this.code.push(CodeGenLineByLineVert.INS_DONE);\r\n\r\n        return this.code;\r\n    }\r\n\r\n    generateCodeForVerticalLinesAndDots(verticalLines: {}[]): void {\r\n        let pos = {x: 0, y: 0};\r\n        let [start, end] = [0, 0];\r\n\r\n        this.code.push(CodeGenLineByLineVert.INS_RST_VERTICAL);\r\n\r\n        verticalLines.forEach(verticalLine => {\r\n            start = verticalLine.y1;\r\n            end = verticalLine.y2;\r\n\r\n            //Move to next column if necessary\r\n            if (pos.x !== verticalLine.x1) {\r\n                this.code.push(CodeGenLineByLineVert.INS_MOV_RIGHT);\r\n                this.code.push((verticalLine.x1 - pos.x) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                pos.x = verticalLine.x1;\r\n            }\r\n\r\n            // //Select DOWN or UP case\r\n            // if (Math.abs(pos.y - verticalLine.y1) < Math.abs(pos.y - verticalLine.y2)) {\r\n            //     start = verticalLine.y1;\r\n            //     end = verticalLine.y2;\r\n            // } else {\r\n            //     start = verticalLine.y2;\r\n            //     end = verticalLine.y1;\r\n            // }\r\n\r\n            //Move to start of new line\r\n            if (pos.y !== start) {\r\n                if (pos.y > start) {\r\n                    this.code.push(CodeGenLineByLineVert.INS_MOV_UP);\r\n                    this.code.push((pos.y - start) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                } else {\r\n                    this.code.push(CodeGenLineByLineVert.INS_MOV_DOWN);\r\n                    this.code.push(Math.abs(start - pos.y) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n                }\r\n                pos.y = start;\r\n            }\r\n\r\n            //Draw line\r\n            this.code.push(CodeGenLineByLineVert.INS_PEN_DOWN);\r\n            if (start !== end) {\r\n                this.code.push((start > end) ? CodeGenLineByLineVert.INS_MOV_UP : CodeGenLineByLineVert.INS_MOV_DOWN);\r\n                this.code.push(Math.abs(start - end) * PlotterGrid.EDITOR_TO_PLOTTER_RATIO);\r\n            }\r\n            this.code.push(CodeGenLineByLineVert.INS_PEN_UP);\r\n            pos.y = end;\r\n        });\r\n    }\r\n\r\n    findVerticalLinesAndDots(plotterGrid: boolean[]): {}[] {\r\n        let horizontalLines = [];\r\n        let lineLength = 0;\r\n\r\n        for (let x = 0; x < plotterGrid.length; x++) {\r\n            for (let y = 0; y <= plotterGrid[0].length; y++) {\r\n                if (y !== plotterGrid[0].length && plotterGrid[x][y]) {\r\n                    lineLength++;\r\n                } else {\r\n                    if (lineLength >= 1) {\r\n                        horizontalLines.push({\r\n                            x1: x,\r\n                            y1: y - lineLength,\r\n                            x2: x,\r\n                            y2: y - 1\r\n                        });\r\n                    }\r\n\r\n                    lineLength = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return horizontalLines;\r\n    }\r\n}","export default class Utils {\r\n    /**\r\n     * @param {p5.Vector} q Vector to test\r\n     * @param {p5.Vector} p1 Rectangle corner 1\r\n     * @param {p5.Vector} p2 Rectangle corner 2\r\n     * @return {boolean}\r\n     */\r\n    static isInside(q, p1, p2) {\r\n        return (q.x >= p1.x && q.x < p2.x && q.y >= p1.y && q.y < p2.y);\r\n    }\r\n\r\n    /**\r\n     * By Angelos Chalaris\r\n     * @param str Text to copy\r\n     */\r\n    static copyToClipboard(str) {\r\n        const el = document.createElement('textarea');  // Create a <textarea> element\r\n        el.value = str;                                 // Set its value to the string that you want copied\r\n        el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n        el.style.position = 'absolute';\r\n        el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n        document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n        const selected =\r\n            document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n                ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n                : false;                                    // Mark as false to know no selection existed before\r\n        el.select();                                    // Select the <textarea> content\r\n        document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n        document.body.removeChild(el);                  // Remove the <textarea> element\r\n        if (selected) {                                 // If a selection existed before copying\r\n            document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n            document.getSelection().addRange(selected);   // Restore the original selection\r\n        }\r\n    };\r\n}","import Dimension from \"../Utils/Dimension\";\r\nimport CodeGenLineByLineHoriz from \"./CodeGenerators/CodeGenLineByLineHoriz\";\r\nimport CodeGenHorizVertPoint from \"./CodeGenerators/CodeGenHorizVertPoint\";\r\nimport CodeGenLineByLineVert from \"./CodeGenerators/CodeGenLineByLineVert\";\r\nimport CodeGenerator from \"./CodeGenerators/CodeGenerator\";\r\nimport Utils from \"../Utils/Utils\";\r\n\r\nexport default class PlotterGrid {\r\n    static GEN_HLBL = 0;\r\n    static GEN_VLBL = 1;\r\n    static GEN_HVP = 2;\r\n\r\n    //Cells to degree ratio. Real machine resolution is 1080 x 252 deg.\r\n    static EDITOR_TO_PLOTTER_RATIO = 9;\r\n\r\n    //Offset to '0' char\r\n    static ENCODER_CHAR_OFFSET = 48;\r\n\r\n    /**\r\n     * @type {Dimension} size\r\n     */\r\n    size;\r\n\r\n    /**\r\n     * Data structure\r\n     * @type {boolean[][]} grid\r\n     */\r\n    grid;\r\n\r\n    /**\r\n     * Generated plotter code\r\n     * @type {number[]}\r\n     */\r\n    plotterCode;\r\n\r\n    /**\r\n     * Generated plotter code as block\r\n     * @type {string}\r\n     */\r\n    plotterCodeBlock;\r\n\r\n    /**\r\n     * Integer for change tracking\r\n     * @type {number}\r\n     */\r\n    stepTracker = 0;\r\n\r\n    /**\r\n     * Create PlotterGrid\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(width, height) {\r\n        this.setSize(width, height);\r\n        this.load();\r\n\r\n        //Autosave drawing\r\n        setInterval(() => {\r\n            this.save()\r\n        }, 1000 * 30);\r\n    }\r\n\r\n    /**\r\n     * Create string from data\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        let output = \"\";\r\n\r\n        for (let j = 0; j < this.size.height; j++) {\r\n            for (let i = 0; i < this.size.width; i++) {\r\n                output += (this.grid[i][j] ? \"1\" : \"0\");\r\n            }\r\n            output += '\\n';\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Register any changes to tracker\r\n     */\r\n    registerStep() {\r\n        this.stepTracker++;\r\n    }\r\n\r\n    /**\r\n     * Check if give step id is same as current\r\n     */\r\n    isUpToDate(step) {\r\n        return step === this.stepTracker;\r\n    }\r\n\r\n    /**\r\n     * Get current step id\r\n     * @return {number}\r\n     */\r\n    getCurrentStep() {\r\n        return this.stepTracker;\r\n    }\r\n\r\n    /**\r\n     * Fill grid with random data\r\n     */\r\n    random() {\r\n        for (let j = 0; j < this.size.height; j++) {\r\n            for (let i = 0; i < this.size.width; i++) {\r\n                this.grid[i][j] = (Math.random() * 2) >= 1;\r\n            }\r\n        }\r\n\r\n        this.registerStep();\r\n    }\r\n\r\n    /**\r\n     * Set grid size\r\n     * @param {Number} width\r\n     * @param {Number} height\r\n     */\r\n    setSize(width, height) {\r\n        this.size = new Dimension(width, height);\r\n        this.createDataStructure();\r\n    }\r\n\r\n    /**\r\n     * Create grid data structure\r\n     */\r\n    createDataStructure() {\r\n        this.grid = new Array(this.size.width);\r\n\r\n        for (let w = 0; w < this.size.width; ++w) {\r\n            this.grid[w] = new Array(this.size.height).fill(false);\r\n        }\r\n\r\n        this.registerStep();\r\n    }\r\n\r\n    /**\r\n     * Encode grid as plotter code\r\n     * @param type\r\n     */\r\n    generatePlotterCode(type) {\r\n        let plotterCodeGenerator;\r\n\r\n        switch (type) {\r\n            default:\r\n            case PlotterGrid.GEN_HLBL:\r\n                plotterCodeGenerator = new CodeGenLineByLineHoriz();\r\n                break;\r\n\r\n            case PlotterGrid.GEN_VLBL:\r\n                plotterCodeGenerator = new CodeGenLineByLineVert();\r\n                break;\r\n\r\n            case PlotterGrid.GEN_HVP:\r\n                plotterCodeGenerator = new CodeGenHorizVertPoint();\r\n                break;\r\n        }\r\n\r\n        this.plotterCode = plotterCodeGenerator.generateCode(this.grid);\r\n        this.plotterCodeBlock = CodeGenerator.createLegoMindstormsDataBlock(this.plotterCode);\r\n        Utils.copyToClipboard(this.plotterCodeBlock);\r\n    }\r\n\r\n    /**\r\n     * Clear PlotterGrid\r\n     */\r\n    clear() {\r\n        for (let w = 0; w < this.size.width; ++w) {\r\n            this.grid[w].fill(false);\r\n        }\r\n\r\n        this.registerStep();\r\n    }\r\n\r\n    /**\r\n     * Get grid size\r\n     * @returns {Dimension}\r\n     */\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n\r\n    /**\r\n     * Get cell state\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @returns {Boolean}\r\n     */\r\n    getCellState(x, y) {\r\n        return this.grid[x][y];\r\n    }\r\n\r\n    /**\r\n     * Set cell state\r\n     * @param {Number} x\r\n     * @param {Number} y\r\n     * @param {Boolean} state\r\n     */\r\n    setCellState(x, y, state = true) {\r\n        if (this.grid[x][y] !== state) {\r\n            this.grid[x][y] = state;\r\n            this.registerStep();\r\n        }\r\n    }\r\n\r\n    save(): string {\r\n        let s = '';\r\n\r\n        let temp = 0;\r\n        for (let y = 0; y < this.size.height; y++) {\r\n            for (let x = 0; x < this.size.width; x++) {\r\n                temp = (temp << 1) | this.grid[x][y];\r\n\r\n                if (x % 6 === 5 || x === this.size.width - 1) {\r\n                    temp += PlotterGrid.ENCODER_CHAR_OFFSET;\r\n                    temp = (temp === 63) ? 120 : temp;\r\n\r\n                    s += String.fromCharCode(temp);\r\n                    temp = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        localStorage.setItem('grid', s);\r\n        return s;\r\n    }\r\n\r\n    load(encoded = '') {\r\n        if (encoded === '') {\r\n            encoded = localStorage.getItem('grid');\r\n\r\n            if (encoded === null || encoded === '') {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let temp = 0;\r\n        for (let y = 0; y < this.size.height; y++) {\r\n            for (let x = 0; x < this.size.width; x++) {\r\n                if (x % 6 === 0) {\r\n                    temp = encoded.charCodeAt(0);\r\n                    temp = (temp === 120) ? 63 : temp;\r\n                    temp -= PlotterGrid.ENCODER_CHAR_OFFSET;\r\n\r\n                    encoded = encoded.substr(1);\r\n                }\r\n\r\n                this.grid[x][y] = (temp & 32) && true;\r\n                temp = temp << 1;\r\n            }\r\n        }\r\n\r\n        this.registerStep();\r\n    }\r\n}","export default function SphereRendererP5(p) {\r\n    let renderedPlotterGrid = null;\r\n    let texture = null;\r\n\r\n    let canvas;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let lastTextureUpdateFrame = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let height = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let width = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let enableRotation = true;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let currentRotation = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let mouseRotationActive = false;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let mouseRotationOffset = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let mouseRotationBase = 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let startMousePos = 0;\r\n\r\n\r\n    p.setup = () => {\r\n        p.setAttributes('antialias', true);\r\n        canvas = p.createCanvas(width, height, p.WEBGL);\r\n        canvas.mousePressed(mousePressed);\r\n        canvas.mouseReleased(mouseReleased);\r\n        canvas.mouseOut(mouseReleased);\r\n        p.frameRate(30);\r\n\r\n        p.noStroke();\r\n        p.smooth();\r\n\r\n        texture = p.createGraphics(960, 480);\r\n    };\r\n\r\n    p.draw = () => {\r\n        if (p.frameCount - lastTextureUpdateFrame >= 3) {\r\n            texture.background(240);\r\n            texture.image(renderedPlotterGrid.graphics, 0, 120);\r\n\r\n            lastTextureUpdateFrame = p.frameCount;\r\n        }\r\n\r\n        if (enableRotation) {\r\n            currentRotation += 0.01;\r\n        }\r\n\r\n        if (mouseRotationActive) {\r\n            mouseRotationOffset = mouseRotationBase + (getMousePosX() - startMousePos)\r\n        }\r\n\r\n        p.rotateY(currentRotation + mouseRotationOffset);\r\n        p.texture(texture);\r\n        p.sphere(120, 16, 16);\r\n    };\r\n\r\n    const mousePressed = () => {\r\n        startMousePos = getMousePosX();\r\n        mouseRotationActive = true;\r\n    };\r\n\r\n    const mouseReleased = () => {\r\n        mouseRotationBase = mouseRotationOffset;\r\n        mouseRotationActive = false;\r\n    };\r\n\r\n    const getMousePosX = () => {\r\n        return p.mouseX / 100;\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        height = props.height;\r\n        width = props.width;\r\n        enableRotation = props.enableRotation;\r\n        renderedPlotterGrid = props.renderedPlotterGrid();\r\n    };\r\n}","import React from 'react';\r\nimport SphereRendererP5 from \"../../GridEditor/SphereRenderer.p5\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport Styles from './Sphere.module.css';\r\n\r\nconst Sphere = (props) => {\r\n    return (\r\n        <div id=\"Sphere\" className={Styles.sphere}>\r\n            <div className={Styles.touchy}>\r\n                <P5Wrapper\r\n                    sketch={SphereRendererP5}\r\n                    renderedPlotterGrid={props.renderedPlotterGrid}\r\n                    enableRotation={props.rotation}\r\n                    width={300}\r\n                    height={300}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sphere;\r\n","import Utils from \"../Utils/Utils\";\r\n\r\nexport default class PlotterGridInteractiveRenderer {\r\n    p;\r\n    gridCanvas;\r\n    canvas;\r\n\r\n    /**\r\n     * @type {PlotterGrid} plotterGrid\r\n     */\r\n    plotterGrid;\r\n\r\n    /**\r\n     * @type {Dimension} gridSize\r\n     */\r\n    plotterGridSize;\r\n\r\n    /**\r\n     * @type {number} cellSize\r\n     */\r\n    cellSize;\r\n\r\n    /**\r\n     * @type {p5.Vector} position\r\n     */\r\n    position;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    lastRenderedCanvasStep = 0;\r\n\r\n    /**\r\n     * @type {boolean} canvasUpdateRequired\r\n     */\r\n    canvasUpdateRequired = true;\r\n\r\n    /**\r\n     * @param p p5 instance\r\n     * @param {PlotterGrid} plotterGrid\r\n     * @param {Number} cellSize\r\n     * @param {p5.Vector} position\r\n     */\r\n    constructor(p, plotterGrid, cellSize, position) {\r\n        this.p = p;\r\n        this.plotterGrid = plotterGrid;\r\n        this.plotterGridSize = this.plotterGrid.getSize();\r\n        this.cellSize = cellSize;\r\n        this.position = position;\r\n\r\n        this.canvas = p.createGraphics(this.plotterGridSize.width * cellSize, this.plotterGridSize.height * cellSize);\r\n        this.canvas.noStroke();\r\n\r\n        this.gridCanvas = p.createGraphics(this.plotterGridSize.width * cellSize, this.plotterGridSize.height * cellSize);\r\n        this.gridCanvas.noStroke();\r\n    }\r\n\r\n    render() {\r\n        if (!this.plotterGrid.isUpToDate(this.lastRenderedCanvasStep)) {\r\n            this.renderGrid();\r\n            this.canvasUpdateRequired = true;\r\n        }\r\n\r\n        if (this.canvasUpdateRequired || this.p.mouseX !== this.p.pmouseX || this.p.mouseY !== this.p.pmouseY) {\r\n            this.renderCanvas();\r\n        }\r\n\r\n        return this.canvas;\r\n    }\r\n\r\n    /**\r\n     * Render canvas from mouse position and grid canvas\r\n     */\r\n    renderCanvas() {\r\n        /**\r\n         * @type {p5.Vector} mouse\r\n         */\r\n        let mouse = this.p.createVector(this.p.mouseX - this.position.x, this.p.mouseY - this.position.y);\r\n        mouse.x = Math.floor(mouse.x / this.cellSize) * this.cellSize;\r\n        mouse.y = Math.floor(mouse.y / this.cellSize) * this.cellSize;\r\n\r\n        this.canvas.image(this.gridCanvas, 0, 0);\r\n        this.canvas.fill(255, 120, 0, 120);\r\n        this.canvas.rect(mouse.x, mouse.y, this.cellSize, this.cellSize);\r\n\r\n        this.canvasUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Render grid to internal canvas.\r\n     */\r\n    renderGrid() {\r\n        this.gridCanvas.background(240);\r\n        this.gridCanvas.fill(70, 70, 200);\r\n        \r\n        for (let w = 0; w < this.plotterGridSize.width; w++) {\r\n            for (let h = 0; h < this.plotterGridSize.height; h++) {\r\n                if (!this.plotterGrid.getCellState(w, h)) {\r\n                    continue;\r\n                }\r\n\r\n                this.gridCanvas.rect(w * this.cellSize, h * this.cellSize, this.cellSize, this.cellSize);\r\n            }\r\n        }\r\n\r\n        this.lastRenderedCanvasStep = this.plotterGrid.getCurrentStep();\r\n    }\r\n\r\n    /**\r\n     * Update only one cell; no need to re-render whole canvas\r\n     * @type {Number} x\r\n     * @type {Number} y\r\n     */\r\n    renderCell(x, y) {\r\n        if (this.plotterGrid.getCellState(x, y)) {\r\n            this.gridCanvas.fill(70, 70, 200);\r\n        } else {\r\n            this.gridCanvas.fill(240);\r\n        }\r\n\r\n        this.gridCanvas.rect(x * this.cellSize, y * this.cellSize, this.cellSize, this.cellSize);\r\n        this.canvasUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Get rendered grid object\r\n     * @return {*}\r\n     */\r\n    getRenderedGrid() {\r\n        if (!this.plotterGrid.isUpToDate(this.lastRenderedCanvasStep)) {\r\n            this.renderGrid();\r\n        }\r\n\r\n        return this.gridCanvas;\r\n    }\r\n\r\n    /**\r\n     * @param {p5.Vector} point\r\n     * @param {boolean} state\r\n     */\r\n    setCellAtPoint(point, state = true) {\r\n        point.x = Math.floor((point.x - this.position.x) / this.cellSize);\r\n        point.y = Math.floor((point.y - this.position.y) / this.cellSize);\r\n\r\n        if (!Utils.isInside(point, this.p.createVector(0, 0), this.p.createVector(this.plotterGridSize.width, this.plotterGridSize.height))) {\r\n            return;\r\n        }\r\n\r\n        this.plotterGrid.setCellState(point.x, point.y, state);\r\n        this.renderCell(point.x, point.y);\r\n\r\n        //Update last rendered step value to prevent re-rendering\r\n        this.lastRenderedCanvasStep = this.plotterGrid.getCurrentStep();\r\n    }\r\n}","import CodeGenerator from \"../CodeGenerators/CodeGenerator\";\r\nimport PlotterGrid from \"../PlotterGrid\";\r\n\r\nexport default class VisualCodeDecoder {\r\n    p;\r\n    canvas;\r\n\r\n    /**\r\n     * @type {Dimension} gridSize\r\n     */\r\n    gridSize;\r\n\r\n    /**\r\n     * @type {number} cellSize\r\n     */\r\n    cellSize;\r\n\r\n    /**\r\n     * @param p p5 instance\r\n     * @param {Dimension} gridSize\r\n     * @param {number} cellSize\r\n     */\r\n    constructor(p, gridSize, cellSize) {\r\n        this.p = p;\r\n        this.gridSize = gridSize;\r\n        this.cellSize = cellSize;\r\n\r\n        this.canvas = p.createGraphics(this.gridSize.width * cellSize, this.gridSize.height * cellSize);\r\n        this.canvas.strokeWeight(2);\r\n    }\r\n\r\n    render() {\r\n        return this.canvas;\r\n    }\r\n\r\n    /**\r\n     * Decode plotter code array\r\n     * @param {number[]} code\r\n     * @param {number}step\r\n     */\r\n    decode(code, step = code.length) {\r\n        this.canvas.clear();\r\n\r\n        let x = 0, y = 0, px = 0, py = 0, i = 0;\r\n        let penDown = false, ppenDown = false;\r\n        let lIns, lArg;\r\n\r\n        for (; i < step; i++) {\r\n            let instruction = code[i];\r\n            [lIns, lArg] = [null, null];\r\n            [px, py, ppenDown] = [x, y, penDown];\r\n\r\n            if (i === 0 && instruction !== CodeGenerator.INS_START) {\r\n                console.error(\"Code without START instruction!\")\r\n            }\r\n\r\n            if (i === code.length - 1 && instruction !== CodeGenerator.INS_DONE) {\r\n                console.error(\"Code without DONE instruction!\");\r\n            }\r\n\r\n            switch (instruction) {\r\n                case CodeGenerator.INS_START:\r\n                    lIns = \"START\";\r\n                    break;\r\n\r\n                case CodeGenerator.INS_DONE:\r\n                    lIns = \"DONE\";\r\n                    break;\r\n\r\n                case CodeGenerator.INS_PEN_DOWN:\r\n                    lIns = \"PEN_DOWN\";\r\n                    penDown = true;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_PEN_UP:\r\n                    lIns = \"PEN_UP\";\r\n                    penDown = false;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_MOV_RIGHT:\r\n                    lIns = \"MOV_RIGHT\";\r\n                    lArg = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    x += lArg;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_MOV_LEFT:\r\n                    lIns = \"MOV_LEFT\";\r\n                    lArg = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    x -= lArg;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_MOV_DOWN:\r\n                    lIns = \"MOV_DOWN\";\r\n                    lArg = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    y += lArg;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_MOV_UP:\r\n                    lIns = \"MOV_UP\";\r\n                    lArg = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    y -= lArg;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_RST_HORIZONTAL:\r\n                    lIns = \"RST_HORIZONTAL\";\r\n                    x = 0;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_RST_VERTICAL:\r\n                    lIns = \"RST_VERTICAL\";\r\n                    y = 0;\r\n                    break;\r\n\r\n                default:\r\n                    continue;\r\n            }\r\n\r\n            if (lIns === CodeGenerator.INS_RST_VERTICAL || lIns === CodeGenerator.INS_RST_HORIZONTAL) {\r\n                this.canvas.stroke(255, 255, 0, 50);\r\n            } else {\r\n                this.canvas.stroke(penDown * 255, 255, !penDown * 255, 255);\r\n            }\r\n\r\n            if (penDown === false) {\r\n                this.canvas.stroke(255, 0, 255, 20);\r\n            }\r\n\r\n            this.canvas.line(\r\n                x * this.cellSize + this.cellSize / 2,\r\n                y * this.cellSize + this.cellSize / 2,\r\n                px * this.cellSize + this.cellSize / 2,\r\n                py * this.cellSize + this.cellSize / 2\r\n            );\r\n\r\n            if (ppenDown !== penDown) {\r\n                this.canvas.noStroke();\r\n\r\n                if (ppenDown === false) {\r\n                    this.canvas.fill(255, 255, 255);\r\n                } else {\r\n                    if (code[i] === CodeGenerator.INS_PEN_UP && code[i - 1] === CodeGenerator.INS_PEN_DOWN) {\r\n                        this.canvas.fill(0, 255, 0);\r\n                    } else {\r\n                        this.canvas.fill(255, 0, 0);\r\n                    }\r\n                }\r\n\r\n                this.canvas.ellipse(\r\n                    x * this.cellSize + this.cellSize / 2,\r\n                    y * this.cellSize + this.cellSize / 2,\r\n                    this.cellSize,\r\n                    this.cellSize\r\n                );\r\n            }\r\n        }\r\n\r\n        this.canvas.fill(0);\r\n        this.canvas.noStroke();\r\n        // this.canvas.text(\"Step \" + step + \"/\" + code.length, 10, 210);\r\n        // this.canvas.text(\"Instruction: \" + lIns + \" / \" + lArg, 10, 190);\r\n        this.canvas.text(\"Path length: \" + this.countPathLength(code, step), 10, 210);\r\n    }\r\n\r\n    countPathLength(code: number[], step: number): number {\r\n        let pathLength = 0;\r\n        let x = 0, y = 0, temp = 0;\r\n\r\n        for (let i = 0; i < step; i++) {\r\n            switch (code[i]) {\r\n                case CodeGenerator.INS_MOV_RIGHT:\r\n                    temp = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    pathLength += temp;\r\n                    x += temp;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_MOV_DOWN:\r\n                    temp = code[++i] / PlotterGrid.EDITOR_TO_PLOTTER_RATIO;\r\n                    pathLength += temp;\r\n                    y += temp;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_RST_HORIZONTAL:\r\n                    pathLength += x;\r\n                    x = 0;\r\n                    break;\r\n\r\n                case CodeGenerator.INS_RST_VERTICAL:\r\n                    pathLength += y;\r\n                    y = 0;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return pathLength;\r\n    }\r\n}","import PlotterGridInteractiveRenderer from \"./PlotterGridInteractiveRenderer\";\r\nimport VisualCodeDecoder from \"../PlotterGrid/CodeDecoder/VisualCodeDecoder\";\r\n\r\nexport default function GridEditorP5(p) {\r\n    let renderedPlotterGrid = null;\r\n\r\n    /**\r\n     * @type {PlotterGrid}\r\n     */\r\n    let plotterGrid = null;\r\n\r\n    /**\r\n     * @type {PlotterGridInteractiveRenderer}\r\n     */\r\n    let plotterGridInteractiveRenderer = null;\r\n\r\n    /**\r\n     * @type {VisualCodeDecoder}\r\n     */\r\n    let visualCodeDecoder = null;\r\n\r\n    /**\r\n     * @type {Number}\r\n     */\r\n    let cellSize = 8;\r\n\r\n    /**\r\n     * @type {p5.Vector}\r\n     */\r\n    let lastClickVector;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let ignoreInput = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let showCodeDecoder = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let isVisualCodeDecoderUpdateNeeded = false;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    let visualCodeDecoderStep = 0;\r\n\r\n    p.setup = () => {\r\n        p.setAttributes('antialias', true);\r\n        p.createCanvas(plotterGrid.getSize().width * cellSize, plotterGrid.getSize().height * cellSize);\r\n        p.frameRate(30);\r\n\r\n        plotterGridInteractiveRenderer = new PlotterGridInteractiveRenderer(p, plotterGrid, cellSize, p.createVector(0, 0));\r\n        visualCodeDecoder = new VisualCodeDecoder(p, plotterGrid.getSize(), cellSize);\r\n\r\n        lastClickVector = p.createVector(0, 0);\r\n    };\r\n\r\n    p.draw = () => {\r\n        p.image(plotterGridInteractiveRenderer.render(), 0, 0);\r\n\r\n        if (showCodeDecoder) {\r\n            if(isVisualCodeDecoderUpdateNeeded){\r\n                visualCodeDecoder.decode(plotterGrid.plotterCode, visualCodeDecoderStep);\r\n                isVisualCodeDecoderUpdateNeeded = false;\r\n            }\r\n\r\n            p.image(visualCodeDecoder.render(), 0, 0);\r\n        }\r\n\r\n        renderedPlotterGrid.graphics = plotterGridInteractiveRenderer.getRenderedGrid();\r\n    };\r\n\r\n    p.mouseDragged = () => {\r\n        if (ignoreInput) {\r\n            return;\r\n        }\r\n\r\n        p.mousePressed();\r\n    };\r\n\r\n    p.mousePressed = () => {\r\n        if (ignoreInput) {\r\n            return;\r\n        }\r\n\r\n        lastClickVector.x = p.mouseX;\r\n        lastClickVector.y = p.mouseY;\r\n\r\n        plotterGridInteractiveRenderer.setCellAtPoint(lastClickVector, p.mouseButton === p.LEFT);\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        plotterGrid = props.plotterGrid();\r\n        renderedPlotterGrid = props.renderedPlotterGrid();\r\n        cellSize = props.cellSize;\r\n        visualCodeDecoderStep = props.visualCodeDecoderStep;\r\n        ignoreInput = props.ignoreInput;\r\n\r\n        if (isVisualCodeDecoderUpdateNeeded === false) {\r\n            isVisualCodeDecoderUpdateNeeded = props.isVisualCodeDecoderUpdateNeeded();\r\n        }\r\n    };\r\n};","import React, {Component} from 'react';\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport Styles from './Editor.module.css';\r\nimport GridEditorP5 from \"../../GridEditor/GridEditor.p5\";\r\n\r\nexport default class Editor extends Component {\r\n    state = {\r\n        visualCodeDecoderUpdateNeeded: false,\r\n        visualCodeDecoderStep: 1000,\r\n        serializedPlotterGrid: \"\"\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.isVisualCodeDecoderUpdateNeeded = this.isVisualCodeDecoderUpdateNeeded.bind(this);\r\n    }\r\n\r\n    isVisualCodeDecoderUpdateNeeded() {\r\n        let currentVCDUNState = this.state.visualCodeDecoderUpdateNeeded;\r\n\r\n        if (currentVCDUNState !== false) {\r\n            this.setState({\r\n                visualCodeDecoderUpdateNeeded: false\r\n            });\r\n        }\r\n\r\n        return currentVCDUNState;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Editor\" className={Styles.editor}>\r\n                <div className={Styles.container}>\r\n                    <P5Wrapper\r\n                        sketch={GridEditorP5}\r\n                        plotterGrid={this.props.getPlotterGrid}\r\n                        renderedPlotterGrid={this.props.getRenderedPlotterGrid}\r\n                        cellSize={8}\r\n                        isVisualCodeDecoderUpdateNeeded={this.isVisualCodeDecoderUpdateNeeded}\r\n                        visualCodeDecoderStep={this.state.visualCodeDecoderStep}\r\n                        ignoreInput={this.props.modalActive}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Styles from './Button.module.css'\r\n\r\nconst button = (props) => {\r\n    let styles = [Styles.button];\r\n\r\n    if (props.danger) {\r\n        styles.push(Styles.danger);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.join(' ')}>\r\n            <button\r\n                onClick={props.onClick}\r\n            >\r\n                {props.children}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default button;","import React from 'react';\r\nimport Styles from './ButtonBar.module.css'\r\n\r\nconst buttonBar = (props) => {\r\n    return (\r\n        <div className={Styles.buttonBar}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default buttonBar;","import React from 'react';\r\nimport Styles from './BottomButtonBar.module.css'\r\nimport Button from \"../UI/Button/Button\";\r\nimport ButtonBar from \"../UI/ButtonBar/ButtonBar\";\r\nimport PlotterGrid from \"../../PlotterGrid/PlotterGrid\";\r\n\r\nconst bottomButtonBar = (props) => {\r\n    return (\r\n        <div className={Styles.bottomButtonBar}>\r\n            <ButtonBar>\r\n                <Button onClick={() => {\r\n                    props.plotterGrid().clear();\r\n                }}\r\n                        danger={true}\r\n                >\r\n                    Wyczyść obraz\r\n                </Button>\r\n\r\n                <Button onClick={() => {\r\n                    props.toggleSphereRotation();\r\n                }}>Włącz / Wyłącz obrót podglądu</Button>\r\n\r\n                <Button onClick={() => {\r\n                    props.showLoadModal();\r\n                }}>Wczytaj obrazek</Button>\r\n\r\n                <Button onClick={() => {\r\n                    props.saveCanvas();\r\n                }}>Zapisz obrazek</Button>\r\n\r\n                <Button onClick={() => {\r\n                    props.plotterGrid().generatePlotterCode(PlotterGrid.GEN_VLBL);\r\n                    props.showGetCodeModal();\r\n                }}>\r\n                    Pobierz kod dla EV3\r\n                </Button>\r\n            </ButtonBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default bottomButtonBar;","import React from 'react';\r\nimport Styles from './Modal.module.css';\r\nimport Button from \"../Button/Button\";\r\n\r\nconst Modal = (props) => {\r\n    if (!props.visible) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={Styles.background}>\r\n            <div className={Styles.container}>\r\n                <div className={Styles.childrenContainer}>\r\n                    {props.children}\r\n                </div>\r\n                <div className={Styles.button}>\r\n                    <Button onClick={props.hideModal}>Zamknij</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Styles from './GetCodeModal.module.css';\r\nimport Video from './../../Assets/CodePasteIntoEditor.mp4';\r\n\r\nconst GetCodeModal = (props) => {\r\n    return (\r\n        <div className={Styles.container}>\r\n            <div>\r\n                <h3 className={Styles.text}>\r\n                    Kod dla EV3 został automatycznie skopiowany.\r\n                </h3>\r\n                <p className={Styles.text}>\r\n                    Otwórz program 'Christmas Ball Decorator'\r\n                    i&nbsp;przejdź do zakładki <b>'Instructions'</b>. Usuń bloczek tablicy i&nbsp;wklej nowy na jego\r\n                    miejsce jak pokazano obok.\r\n                </p>\r\n                <p className={Styles.text}>\r\n                    Jeżeli nie możesz wkleić nowego bloczka do&nbsp;edytora EV3 to&nbsp;prawdopodobnie kod\r\n                    nie&nbsp;został\r\n                    automatycznie skopiowany.\r\n                    W&nbsp;takim przypadku skopiuj cały tekst z&nbsp;poniższego pola tekstowego.\r\n                </p>\r\n                <p className={Styles.center}><code>CTRL + A, CTRL + C</code></p>\r\n                <textarea className={Styles.textarea} rows='4' readOnly value={props.code}/>\r\n            </div>\r\n            <div>\r\n                <video className={Styles.video} height='400' width='450' autoPlay loop>\r\n                    <source src={Video} type='video/mp4'/>\r\n                    Nie można odtworzyć wideo.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GetCodeModal;","import React from 'react';\r\nimport Styles from './FileInput.module.css'\r\n\r\nconst fileInput = (props) => {\r\n    let styles = [Styles.input];\r\n\r\n    if (props.danger) {\r\n        styles.push(Styles.danger);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.join(' ')}>\r\n            <div className={Styles.button}>\r\n                <input\r\n                    type='file'\r\n                    id='file'\r\n                    accept='image/x-png'\r\n                    onChange={(event) => {\r\n                        props.loadCanvas(event.target.files[0]);\r\n                        props.hideModal();\r\n                    }}\r\n                />\r\n                Wczytaj obrazek\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default fileInput;","import React, {Component} from 'react';\r\nimport Styles from './LoadModal.module.css';\r\nimport FileInput from \"../UI/FileInput/FileInput\";\r\n\r\nexport default class LoadModal extends Component {\r\n    state = {\r\n        code: ''\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        this.setState({\r\n            code: localStorage.getItem('code')\r\n        });\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        localStorage.setItem('code', this.state.code);\r\n    }\r\n\r\n    render(props) {\r\n        return (\r\n            <div className={Styles.container}>\r\n\r\n                <h3 className={Styles.text}>\r\n                    Wczytaj obrazek\r\n                </h3>\r\n                <p className={Styles.text}>\r\n                    Obrazek który chcesz wczytać musi być zapisany jako plik <code>.png</code> o&nbsp;rozdzielczości\r\n                    120&nbsp;x&nbsp;28&nbsp;pikseli. Obrazek ten powinien być czarno-biały. Aktualny obrazek zostanie\r\n                    nadpisany!\r\n                </p>\r\n                <div className={Styles.buttons}>\r\n                    <FileInput\r\n                        danger={true}\r\n                        loadCanvas={this.props.loadCanvas}\r\n                        hideModal={this.props.hideModal}\r\n                    >\r\n                        Wczytaj obrazek\r\n                    </FileInput>\r\n                </div>\r\n                <p className={Styles.text}>\r\n                    Gotowe wzory bombek znajdziesz w&nbsp;folderze <code>Gotowe obrazki</code>.\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","/**\r\n * Preserve plotter grid reference between mounts\r\n * @type {PlotterGrid}\r\n */\r\nlet plotterGrid = null;\r\n\r\nexport default function FileRendererP5(p) {\r\n    /**\r\n     * @type {Dimension} gridSize\r\n     */\r\n    let plotterGridSize;\r\n\r\n    let canvas;\r\n\r\n    p.setup = () => {\r\n        plotterGridSize = plotterGrid.getSize();\r\n\r\n        canvas = p.createCanvas(plotterGridSize.width, plotterGridSize.height);\r\n        p.noLoop();\r\n        p.noFill();\r\n        drawCanvas();\r\n    };\r\n\r\n    const drawCanvas = () => {\r\n        p.background(255);\r\n        p.stroke(0);\r\n\r\n        for (let w = 0; w < plotterGridSize.width; w++) {\r\n            for (let h = 0; h < plotterGridSize.height; h++) {\r\n                if (!plotterGrid.getCellState(w, h)) {\r\n                    continue;\r\n                }\r\n\r\n                p.point(w, h);\r\n            }\r\n        }\r\n    };\r\n\r\n    const loadCanvas = (path) => {\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = function (e) {\r\n            let img = p.createImg(e.target.result, '', '', () => {\r\n                if (img.width !== 120 || img.height !== 28) {\r\n                    return;\r\n                }\r\n\r\n                p.background(255);\r\n                p.image(img, 0, 0);\r\n\r\n                for (let x = 0; x < plotterGridSize.width; x++) {\r\n                    for (let y = 0; y < plotterGridSize.height; y++) {\r\n                        plotterGrid.setCellState(x, y, p.get(x, y)[0] <= 127);\r\n                    }\r\n                }\r\n\r\n                img.remove();\r\n            });\r\n        };\r\n        reader.readAsDataURL(path);\r\n    };\r\n\r\n    p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n        plotterGrid = props.plotterGrid();\r\n\r\n        if (props.loadCanvas !== undefined) {\r\n            let path = props.loadCanvas();\r\n\r\n            if (path && path !== true) {\r\n                loadCanvas(path);\r\n            }\r\n        }\r\n\r\n        if (props.saveCanvas !== undefined && props.saveCanvas() === true) {\r\n            drawCanvas();\r\n            p.saveCanvas(canvas, 'christmass_ball', 'png');\r\n        }\r\n    };\r\n};","import React from 'react';\r\nimport Styles from \"./FileRenderer.module.css\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\nimport FileRendererP5 from \"../../GridEditor/FileRenderer.p5\";\r\n\r\nconst fileRenderer = (props) => {\r\n    return (\r\n        <div className={Styles.fileSaveRenderer}>\r\n            <P5Wrapper\r\n                sketch={FileRendererP5}\r\n                plotterGrid={props.plotterGrid}\r\n                saveCanvas={props.saveCanvas}\r\n                loadCanvas={props.loadCanvas}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default fileRenderer;","import React from 'react';\r\nimport Styles from './StartupModal.module.css';\r\nimport Video from './../../Assets/Drawing.mp4';\r\n\r\nconst StartupModal = () => {\r\n    return (\r\n        <div className={Styles.container}>\r\n            <div>\r\n                <h3 className={Styles.text}>\r\n                    Witaj w edytorze ozdób!\r\n                </h3>\r\n                <p className={Styles.text}>\r\n                    Aby namalować własny wzór użyj myszy:\r\n                </p>\r\n                <p className={Styles.text}><code>Lewy przycisk myszy</code> - Maluj</p>\r\n                <p className={Styles.text}><code>Prawy przycisk myszy</code> - Gumka</p>\r\n                <p className={Styles.text}>\r\n                    Możesz też wczytać gotowy obrazek, wystarczy wcisnąć <code>Wybierz obrazek</code>.\r\n                </p>\r\n                <p>\r\n                    Gdy już skończysz projektować ozdobę naciśnij <code>Pobierz kod dla EV3</code>.\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <video className={Styles.video} height='222' width='228' autoPlay loop>\r\n                    <source src={Video} type='video/mp4'/>\r\n                    Nie można odtworzyć wideo.\r\n                </video>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default StartupModal;","import React, {Component} from 'react';\n\nimport Styles from './App.module.css';\nimport PlotterGrid from \"./PlotterGrid/PlotterGrid\";\n\nimport Sphere from \"./Components/Sphere/Sphere\";\nimport Editor from \"./Components/Editor/Editor\";\nimport BottomButtonBar from \"./Components/BottomButtonBar/BottomButtonBar\";\nimport Modal from \"./Components/UI/Modal/Modal\";\nimport GetCodeModal from \"./Components/GetCodeModal/GetCodeModal\";\nimport LoadModal from \"./Components/LoadModal/LoadModal\";\nimport FileRenderer from \"./Components/FileRenderer/FileRenderer\";\nimport StartupModal from \"./Components/StartupModal/StartupModal\";\n\nclass App extends Component {\n    state = {\n        serializedPlotterGrid: \"\",\n        sphereRotation: true,\n        showGetCodeModal: false,\n        showLoadModal: false,\n        showStartupModal: true,\n        saveCanvas: false,\n        loadCanvas: false\n    };\n\n    /**\n     * @type {PlotterGrid}\n     */\n    plotterGrid = {};\n\n    renderedPlotterGrid = {};\n\n    constructor() {\n        super();\n        this.plotterGrid = new PlotterGrid(120, 28);\n        this.getPlotterGrid = this.getPlotterGrid.bind(this);\n        this.getRenderedPlotterGrid = this.getRenderedPlotterGrid.bind(this);\n    }\n\n    /**\n     * A way to provide realtime data to p5.js sketches without state changing\n     * @return {PlotterGrid}\n     */\n    getPlotterGrid() {\n        return this.plotterGrid;\n    }\n\n    /**\n     * A way to provide realtime data to p5.js sketches without state changing\n     */\n    getRenderedPlotterGrid() {\n        return this.renderedPlotterGrid;\n    }\n\n    render() {\n        return (\n            <div className={Styles.app} onContextMenu={(e) => {\n                e.preventDefault();\n            }}>\n                <Editor\n                    getPlotterGrid={this.getPlotterGrid}\n                    getRenderedPlotterGrid={this.getRenderedPlotterGrid}\n                    modalActive={this.state.showGetCodeModal || this.state.showLoadModal}\n                />\n\n                <Sphere\n                    renderedPlotterGrid={this.getRenderedPlotterGrid}\n                    rotation={this.state.sphereRotation}\n                />\n\n                <BottomButtonBar\n                    plotterGrid={this.getPlotterGrid}\n                    showGetCodeModal={() => this.setState({showGetCodeModal: true})}\n                    showLoadModal={() => this.setState({showLoadModal: true})}\n                    toggleSphereRotation={() => this.setState({sphereRotation: !this.state.sphereRotation})}\n                    saveCanvas={() => {\n                        this.setState({saveCanvas: true})\n                    }}\n                />\n\n                <Modal\n                    visible={this.state.showGetCodeModal}\n                    hideModal={() => this.setState({showGetCodeModal: false})}\n                >\n                    <GetCodeModal\n                        code={this.plotterGrid.plotterCodeBlock}\n                    />\n                </Modal>\n\n                <Modal\n                    visible={this.state.showLoadModal}\n                    hideModal={() => this.setState({showLoadModal: false})}\n                >\n                    <LoadModal\n                        loadCanvas={(path) => {\n                            this.setState({loadCanvas: path})\n                        }}\n                        hideModal={() => this.setState({showLoadModal: false})}\n                    />\n                </Modal>\n\n                <Modal\n                    visible={this.state.showStartupModal}\n                    hideModal={() => this.setState({showStartupModal: false})}\n                >\n                    <StartupModal/>\n                </Modal>\n\n                <FileRenderer\n                    plotterGrid={this.getPlotterGrid}\n\n                    saveCanvas={() => {\n                        let temp = this.state.saveCanvas;\n\n                        if (temp) {\n                            this.setState({saveCanvas: false});\n                        }\n\n                        return temp;\n                    }}\n\n                    loadCanvas={() => {\n                        let temp = this.state.loadCanvas;\n\n                        if (temp) {\n                            this.setState({loadCanvas: false});\n                        }\n\n                        return temp;\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}